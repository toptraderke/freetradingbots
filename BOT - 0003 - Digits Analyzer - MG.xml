import requests
import json
import time
from collections import defaultdict
import winsound  # For playing sound on Windows
import logging
import os

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load API tokens from environment variables
DEMO_API_TOKEN = os.getenv('DEMO_API_TOKEN', 'RttWD40xhiehgI1')
REAL_API_TOKEN = os.getenv('REAL_API_TOKEN', '33Q96VIqrjK8BiP')

# Define the endpoint
endpoint = 'https://api.deriv.com'

def get_latest_tick(symbol, api_token):
    url = f'{endpoint}/v3/price/tick'
    params = {'symbol': symbol, 'subscribe': 1}
    try:
        response = requests.get(url, params=params, headers={'Authorization': f'Bearer {api_token}'})
        response.raise_for_status()
        data = response.json()
        if 'tick' in data and 'quote' in data['tick']:
            return data['tick']['quote']
        else:
            logging.error("Unexpected response format: %s", data)
            return None
    except requests.RequestException as e:
        logging.error("Error fetching latest tick: %s", e)
        return None

def place_trade(symbol, amount, contract_type, api_token):
    url = f'{endpoint}/v3/trade'
    payload = {
        'symbol': symbol,
        'amount': amount,
        'contract_type': contract_type,
        'duration': 1,
        'duration_unit': 't',
        'basis': 'stake',
        'currency': 'USD'
    }
    try:
        response = requests.post(url, data=json.dumps(payload), headers={'Authorization': f'Bearer {api_token}', 'Content-Type': 'application/json'})
        response.raise_for_status()
        data = response.json()
        if 'contract' in data:
            return data
        else:
            logging.error("Unexpected response format: %s", data)
            return None
    except requests.RequestException as e:
        logging.error("Error placing trade: %s", e)
        return None

def log_trade(trade_result, account_type):
    with open(f'trade_log_{account_type}.txt', 'a') as log_file:
        log_file.write(json.dumps(trade_result) + '\n')

def main():
    symbol = 'R_100'
    base_amount = 1.00
    contract_type = 'DIGITMATCH'
    digit_counts = defaultdict(int)
    observation_period = 500
    tick_data = []

    # Ask the user which digit to predict
    predicted_digit = input("Enter the digit you want to predict (0-9) or 'auto' for automatic prediction: ")
    if predicted_digit.lower() == 'auto':
        auto_predict = True
    else:
        auto_predict = False
        predicted_digit = int(predicted_digit)

    while True:
        tick = get_latest_tick(symbol, DEMO_API_TOKEN)
        if tick is None:
            logging.warning("Skipping tick due to error.")
            time.sleep(1)
            continue

        tick_data.append(tick)
        if len(tick_data) > observation_period:
            tick_data.pop(0)

        last_digit = int(str(tick)[-1])
        digit_counts[last_digit] += 1

        if len(tick_data) >= observation_period:
            if auto_predict:
                sorted_digits = sorted(digit_counts.items(), key=lambda item: item[1], reverse=True)
                new_predicted_digit = sorted_digits[0][0]

                # Check if the predicted digit has changed
                if new_predicted_digit != predicted_digit:
                    logging.info(f"Predicted digit changed from {predicted_digit} to {new_predicted_digit}")
                    predicted_digit = new_predicted_digit

            # Analyze the market for the perfect entry point
            for _ in range(20):
                tick = get_latest_tick(symbol, DEMO_API_TOKEN)
                if tick is None:
                    logging.warning("Skipping tick due to error.")
                    time.sleep(1)
                    continue

                last_digit = int(str(tick)[-1])
                if last_digit == predicted_digit:
                    # Simulate the trade to check the outcome
                    demo_trade_result = place_trade(symbol, base_amount, contract_type, DEMO_API_TOKEN)
                    if demo_trade_result is None:
                        logging.warning("Skipping trade due to error.")
                        time.sleep(1)
                        continue

                    # Check if the trade would be a win
                    if demo_trade_result['contract']['status'] == 'win':
                        logging.info(f'Placing real trade for digit {predicted_digit}')
                        real_trade_result = place_trade(symbol, base_amount, contract_type, REAL_API_TOKEN)
                        if real_trade_result is None:
                            logging.warning("Skipping real trade due to error.")
                            time.sleep(1)
                            continue

                        logging.info(f'Real trade placed for digit {predicted_digit}: {real_trade_result}')
                        log_trade(real_trade_result, 'real')
                    else:
                        logging.info(f'Skipping trade as it would result in a loss: {demo_trade_result}')
                    break

        time.sleep(1)

if __name__ == "__main__":
    main()
